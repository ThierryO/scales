% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/breaks.r
\name{log_sub_breaks}
\alias{log_sub_breaks}
\title{Calculate intermediate log-scale breaks}
\usage{
log_sub_breaks(rng, n = 5, base = 10)
}
\arguments{
\item{rng}{log-range of the values}

\item{n}{desired number of breaks}

\item{base}{base of logarithm to use}
}
\description{
Using only integer powers of base is not always sufficient as breaks.
\code{log_sub_breaks} add intermediate breaks which are integer multiples of
integer powers of base. See Details for the implementation.
}
\details{
We illustrate how it works by using a \code{base = 10} example.
We will always use the integer power of \code{base} (10^-1, 10^0, 10^1, ...),
so the set of integers to multiply them with will always contain 1. Then we
search for the integer between 1 and \code{base} which splits the interval
approximately in half. This is 3 in case of \code{base = 10}, because
\code{log10(3) = 0.477}. Now we have 2 intervals: \code{c(1, 3)} and
\code{c(3, 10)}. Now we look for another integer which splits the largest
interval (in the log-scale) approximately in half, which is 5 (\code{log10(5)
= 0.699}).

The generic algorithm starts with a set of integers \code{steps} containing
only 1 and a set of candidate integers containing all integers larger than 1
and smaller than \code{base}. Then for each remaining candidate integer
\code{x}, we calculate the smallest interval (in the log-scale) for the
vector \code{sort(c(x, steps, base))}. The candidate \code{x} which yields
the largest minimal interval is added to \code{steps} and removed from the
candidates. This is repeated untill either a sufficient number of breaks is
reached or when all candidates have been used.
}
\author{
Thierry Onkelinx, \email{thierry.onkelinx@inbo.be}
}
